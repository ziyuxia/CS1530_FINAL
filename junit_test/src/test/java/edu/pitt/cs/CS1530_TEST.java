package edu.pitt.cs;
import static org.hamcrest.MatcherAssert.assertThat;
import java.time.Duration;
// Generated by Selenium IDE
import org.junit.Test;
import org.junit.Before;
import org.junit.After;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.core.IsNot.not;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.remote.RemoteWebDriver;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Alert;
import org.openqa.selenium.Keys;
import java.util.*;
import java.net.MalformedURLException;
import java.net.URL;
public class CS1530_TEST {
  private WebDriver driver;
  private Map<String, Object> vars;
  JavascriptExecutor js;
  @Before
  public void setUp() {
    driver = new ChromeDriver();
    js = (JavascriptExecutor) driver;
    vars = new HashMap<String, Object>();
  }
  @After
  public void tearDown() {
    driver.quit();
  }
  @Test
  public void tEST1STUDENTPAGEEXPLORE() {
    // Test name: TEST-1-STUDENTPAGE-EXPLORE
    // Step # | name | target | value
    // 1 | open | http://localhost:3000/ | 
    driver.get("http://localhost:3000/");
    // 2 | assertElementPresent | linkText=Explore | 
    {
      List<WebElement> elements = driver.findElements(By.linkText("Explore"));
      assert(elements.size() > 0);
    }
  }
  @Test
  public void tEST2STUDENTPAGEACCOUNT() {
    // Test name: TEST-2-STUDENTPAGE-ACCOUNT
    // Step # | name | target | value
    // 1 | open | http://localhost:3000/ | 
    driver.get("http://localhost:3000/");
    // 2 | click | linkText=Account | 
    driver.findElement(By.linkText("Account")).click();
    // 3 | assertText | css=h3 | Jerry
    assertThat(driver.findElement(By.cssSelector("h3")).getText(), is("Jerry"));
    // 4 | assertText | css=p:nth-child(2) | Email: jerry@pitt.edu
    assertThat(driver.findElement(By.cssSelector("p:nth-child(2)")).getText(), is("Email: jerry@pitt.edu"));
    // 5 | assertText | css=p:nth-child(3) | Account Type: student
    assertThat(driver.findElement(By.cssSelector("p:nth-child(3)")).getText(), is("Account Type: student"));
  }
  @Test
  public void tEST3STUDENTPAGESHOWLESSON() {
    // Test name: TEST-3-STUDENTPAGE-SHOWLESSON
    // Step # | name | target | value
    // 1 | open | http://localhost:3000/ | 
    driver.get("http://localhost:3000/");
    // 2 | assertElementPresent | css=.lesson:nth-child(1) > .name | 
    {
      List<WebElement> elements = driver.findElements(By.cssSelector(".lesson:nth-child(1) > .name"));
      assert(elements.size() > 0);
    }
  }
  @Test
  public void tEST4STUDENTPAGESTARTLESSON() {
    // Test name: TEST-4-STUDENTPAGE-STARTLESSON
    // Step # | name | target | value
    // 1 | open | http://localhost:3000/ | 
    driver.get("http://localhost:3000/");
    // 2 | setWindowSize | 1013x1087 | 
    driver.manage().window().setSize(new Dimension(1013, 1087));
    // 3 | click | css=.lesson:nth-child(1) > .start-button | 
    driver.findElement(By.cssSelector(".lesson:nth-child(1) > .start-button")).click();
    // 4 | click | css=.textbox | 
    driver.findElement(By.cssSelector(".textbox")).click();
    // 5 | type | css=.textbox | 123
    driver.findElement(By.cssSelector(".textbox")).sendKeys("123");
  }
  @Test
  public void tEST5STUDENTPAGEHOME() {
    // Test name: TEST-5-STUDENTPAGE-HOME
    // Step # | name | target | value
    // 1 | open | http://localhost:3000/ | 
    driver.get("http://localhost:3000/");
    // 2 | setWindowSize | 1014x1088 | 
    driver.manage().window().setSize(new Dimension(1014, 1088));
    // 3 | click | linkText=Account | 
    driver.findElement(By.linkText("Account")).click();
    // 4 | click | linkText=Home | 
    driver.findElement(By.linkText("Home")).click();
    // 5 | assertElementPresent | css=.lesson:nth-child(1) > .name | 
    {
      List<WebElement> elements = driver.findElements(By.cssSelector(".lesson:nth-child(1) > .name"));
      assert(elements.size() > 0);
    }
  }
  @Test
  public void tEST6EDUCATORPAGECREATELESSON() {
    // Test name: TEST-6-EDUCATORPAGE-CREATE-LESSON
    // Step # | name | target | value
    // 1 | open | http://localhost:3000/ | 
    driver.get("http://localhost:3000/");
    // 2 | setWindowSize | 1015x1088 | 
    driver.manage().window().setSize(new Dimension(1015, 1088));
    // 3 | click | linkText=Educator | 
    driver.findElement(By.linkText("Educator")).click();
    // 4 | click | linkText=Create Lesson | 
    driver.findElement(By.linkText("Create Lesson")).click();
    // 5 | click | id=lesson-name | 
    driver.findElement(By.id("lesson-name")).click();
    // 6 | type | id=lesson-name | Lesson 8
    driver.findElement(By.id("lesson-name")).sendKeys("Lesson 8");
    // 7 | click | id=lesson-question | 
    driver.findElement(By.id("lesson-question")).click();
    // 8 | type | id=lesson-question | dynamic programming
    driver.findElement(By.id("lesson-question")).sendKeys("dynamic programming");
    // 9 | click | css=button | 
    driver.findElement(By.cssSelector("button")).click();
    // 10 | click | linkText=Home | 
    driver.findElement(By.linkText("Home")).click();
    // 11 | assertText | css=.lesson:last-child h2 | Lesson 8
    assertThat(driver.findElement(By.cssSelector(".lesson:last-child h2")).getText(), is("Lesson 8"));
    // 12 | click | css=.lesson:last-child > .start-button | dynamic programming
    driver.findElement(By.cssSelector(".lesson:last-child > .start-button")).click();
  }
  @Test
  public void tEST7EDUCATORPAGEACCOUNT() {
    // Test name: TEST-7-EDUCATORPAGE-ACCOUNT
    // Step # | name | target | value
    // 1 | open | http://localhost:3000/ | 
    driver.get("http://localhost:3000/");
    // 2 | setWindowSize | 1011x1086 | 
    driver.manage().window().setSize(new Dimension(1011, 1086));
    // 3 | click | linkText=Educator | 
    driver.findElement(By.linkText("Educator")).click();
    // 4 | click | linkText=Account | 
    driver.findElement(By.linkText("Account")).click();
    // 5 | assertText | css=h3 | Sam
    assertThat(driver.findElement(By.cssSelector("h3")).getText(), is("Sam"));
    // 6 | assertText | css=p:nth-child(2) | Email: sam@pitt.edu
    assertThat(driver.findElement(By.cssSelector("p:nth-child(2)")).getText(), is("Email: sam@pitt.edu"));
    // 7 | assertText | css=p:nth-child(3) | Account Type: educator
    assertThat(driver.findElement(By.cssSelector("p:nth-child(3)")).getText(), is("Account Type: educator"));
  }
  @Test
  public void tEST8EDUCATORPAGEVIEWSTUDENTS() {
    // Test name: TEST-8-EDUCATORPAGE-VIEWSTUDENTS
    // Step # | name | target | value
    // 1 | open | http://localhost:3000/ | 
    driver.get("http://localhost:3000/");
    // 2 | setWindowSize | 1040x1104 | 
    driver.manage().window().setSize(new Dimension(1040, 1104));
    // 3 | click | linkText=Educator | 
    driver.findElement(By.linkText("Educator")).click();
    // 4 | click | linkText=View Students | 
    driver.findElement(By.linkText("View Students")).click();
    // 5 | assertText | css=p:nth-child(3) | Account Type: student
    assertThat(driver.findElement(By.cssSelector("p:nth-child(3)")).getText(), is("Account Type: student"));
  }
}